@model phoneCaseReworked.ViewModels.PurchaseViewModel

@{
    ViewData["Title"] = "Record Purchase";
    var today = DateTime.Now;
    var minDate = today.AddDays(-7).ToString("yyyy-MM-dd");
    var maxDate = today.ToString("yyyy-MM-dd");
}

<h2 class="mb-4">@ViewData["Title"]</h2>

<div class="container">
    <form method="post" asp-action="SavePurchase">

        <div class="mb-3">
            <label asp-for="SelectedVendorId" class="form-label">Select Vendor</label>
            <select asp-for="SelectedVendorId" class="form-select" required>
                <option value="">-- Select Vendor --</option>
                @foreach (var vendor in Model.Vendors)
                {
                    <option value="@vendor.VendorId">@vendor.Name</option>
                }
            </select>
            <span asp-validation-for="SelectedVendorId" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="PurchaseDate" class="form-label">Purchase Date</label>
            <input asp-for="PurchaseDate" type="date" class="form-control"
                   min="@minDate" max="@maxDate" required />
            <span asp-validation-for="PurchaseDate" class="text-danger"></span>
        </div>

        <h4>Products</h4>
        <div id="product-container">
            <div class="product-row card mb-3 p-3">
                <div class="row">
                    <div class="col-md-5 mb-2">
                        <label class="form-label">Product</label>
                        <select name="Purchase[0].ProductId" class="form-select" required>
                            <option value="">-- Select Product --</option>
                            @foreach (var product in Model.Products)
                            {
                                <option value="@product.ProductId">@product.CaseName (@(product.Model?.Name ?? "Unknown Model") - @(product.CaseManufacturer?.Name ?? "Unknown Manufacturer"))</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2 mb-2">
                        <label class="form-label">Quantity</label>
                        <input name="Purchase[0].Quantity" type="number" class="form-control" min="1" required />
                    </div>
                    <div class="col-md-3 mb-2">
                        <label class="form-label">Unit Price</label>
                        <input name="Purchase[0].UnitPrice" type="number" class="form-control" min="50" step="0.01" required />
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="button" class="btn btn-danger remove-product">Remove</button>
                    </div>
                </div>
            </div>
        </div>

        <button type="button" class="btn btn-secondary mb-3" id="add-product">Add Another Product</button>

        <button type="submit" class="btn btn-primary">Save Purchase</button>
    </form>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const container = document.getElementById('product-container');
            const addButton = document.getElementById('add-product');

            function reindexFields() {
                const rows = container.querySelectorAll('.product-row');
                rows.forEach((row, i) => {
                    row.querySelectorAll('input, select').forEach(input => {
                        const name = input.getAttribute('name');
                        if (name) {
                            const newName = name.replace(/\[\d+\]/, `[${i}]`);
                            input.setAttribute('name', newName);
                        }
                    });
                });
            }

            addButton.addEventListener('click', () => {
                const newRow = container.firstElementChild.cloneNode(true);
                newRow.querySelectorAll('input').forEach(input => input.value = '');
                container.appendChild(newRow);
                reindexFields();
            });

            container.addEventListener('click', (e) => {
                if (e.target.classList.contains('remove-product') && container.childElementCount > 1) {
                    e.target.closest('.product-row').remove();
                    reindexFields();
                }
            });

            // Initial reindex just in case
            reindexFields();
        });
    </script>
}
