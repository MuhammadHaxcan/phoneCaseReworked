@model phoneCaseReworked.Controllers.StatsViewModel

@{
    ViewData["Title"] = "Business Overview";
}

<h2 class="mb-4">@ViewData["Title"]</h2>

<div class="container">
    <form asp-action="Stats" method="get" class="mb-4">
        <div class="row">
            <div class="col-md-4">
                <label class="form-label">Start Date</label>
                <input type="date" name="startDate" class="form-control" value="@Model.StartDate.ToString("yyyy-MM-dd")" />
            </div>
            <div class="col-md-4">
                <label class="form-label">End Date</label>
                <input type="date" name="endDate" class="form-control" value="@Model.EndDate.ToString("yyyy-MM-dd")" />
            </div>
            <div class="col-md-4 d-flex align-items-end">
                <button type="submit" class="btn btn-primary w-100">View Stats</button>
            </div>
        </div>
    </form>

    <div class="row">
        <div class="col-md-4">
            <div class="card text-white bg-primary mb-3">
                <div class="card-body">
                    <h5 class="card-title">Cumulative Purchases</h5>
                    <p class="card-text fs-4">Rs. @Model.CumulativeTotalPurchases.ToString("N2")</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-white bg-success mb-3">
                <div class="card-body">
                    <h5 class="card-title">Cumulative Payments</h5>
                    <p class="card-text fs-4">Rs. @Model.CumulativeTotalPayments.ToString("N2")</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-white bg-warning mb-3">
                <div class="card-body">
                    <h5 class="card-title">Remaining Credit Across Vendors</h5>
                    <p class="card-text fs-4">Rs. @Model.CumulativeRemainingCredit.ToString("N2")</p>
                </div>
            </div>
        </div>
    </div>

    <h4 class="mt-4">Vendor Breakdown</h4>

    <div class="alert alert-info">
        Showing data from @Model.StartDate.ToString("MMM dd, yyyy") to @Model.EndDate.ToString("MMM dd, yyyy")
    </div>

    @if (Model.VendorData.Any())
    {
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Vendor Name</th>
                    <th class="text-end">Total Purchases</th>
                    <th class="text-end">Total Payments</th>
                    <th class="text-end">Remaining Credit</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var vendor in Model.VendorData)
                {
                    <tr>
                        <td>@vendor.VendorName</td>
                        <td class="text-end">Rs. @vendor.TotalPurchases.ToString("N2")</td>
                        <td class="text-end">Rs. @vendor.TotalPayments.ToString("N2")</td>
                        <td class="text-end">Rs. @vendor.RemainingCredit.ToString("N2")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-info">No purchases recorded for this date range.</div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const startDateInput = document.querySelector('input[name="startDate"]');
            const endDateInput = document.querySelector('input[name="endDate"]');
            const form = document.querySelector('form');

            // Set default values to today's date if not already set
            const today = new Date().toISOString().split('T')[0];
            if (!startDateInput.value) startDateInput.value = today;
            if (!endDateInput.value) endDateInput.value = today;

            // Validate dates before form submission
            form.addEventListener('submit', function(event) {
                const startDate = new Date(startDateInput.value);
                const endDate = new Date(endDateInput.value);

                if (endDate < startDate) {
                    event.preventDefault();
                    alert('End date cannot be before start date');
                    endDateInput.value = startDateInput.value;
                }
            });

            // Update end date if it becomes invalid when start date changes
            startDateInput.addEventListener('change', function() {
                const startDate = new Date(startDateInput.value);
                const endDate = new Date(endDateInput.value);

                if (endDate < startDate) {
                    endDateInput.value = startDateInput.value;
                }
            });
        });
    </script>
}